## Analysis
# 애널라이저 확인

# standard
POST _analyze
{
  "text": "Winter is Coming!!!"
}

POST _analyze
{
  "tokenizer": "standard",
  "filter": [
    "lowercase",
    "asciifolding"
  ],
  "text": "Is this déja vu?"
}

# whitespace
POST _analyze
{
  "analyzer": "whitespace",
  "text": "Winter is coming!!!"
}

POST _analyze
{
  "char_filter": [
    "html_strip"
  ],
  "tokenizer": "whitespace",
  "filter": [
    "uppercase"
  ],
  "text": "<B>This is mixed analyzer</B>"
}

# english
POST _analyze
{
  "analyzer": "english",
  "text": "Winter is coming!!!"
}

# 이미 정의되어 있는 analyzer 를 그대로 가져다가 사용하는 방식
PUT index_analyzer_settings1
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "type": "standard",
          "max_token_length": 5,
          "stopwords": "_english_"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "comment": {
        "type": "text",
        "analyzer": "my_analyzer"
      }
    }
  }
}

POST index_analyzer_settings1/_analyze
{
  "analyzer": "my_analyzer",
  "text": "<B>This is Standard Analyzer</B>"
}

POST index_analyzer_settings1/_doc
{
  "comment": "<B>This is Standard Analyzer</B>"
}

GET index_analyzer_settings1/_search
{
  "query": {
    "match": {
      "comment": "standard"
    }
  }
}

# 이미 정의되어 있는 tokenizer 에 character filter, token filter 를 조합하여 사용하는 방식
PUT index_analyzer_settings2
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "type": "custom",
          "char_filter": [
            "html_strip"
          ],
          "tokenizer": "standard",
          "filter": [
            "uppercase"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "comment": {
        "type": "text",
        "analyzer": "my_analyzer"
      }
    }
  }
}

POST index_analyzer_settings2/_analyze
{
  "analyzer": "my_analyzer",
  "text": "<B>This is Standard Analyzer</B>"
}

POST index_analyzer_settings2/_doc
{
  "comment": "<B>This is Standard Analyzer</B>"
}

GET index_analyzer_settings2/_search
{
  "query": {
    "match": {
      "comment": "standard"
    }
  }
}

# mixed
PUT mixed_analyzer
{
  "settings": {
    "analysis": {
      "char_filter": {
        "my_char_filter": {
          "type": "mapping",
          "mappings": [
            ":) => _happy_",
            ":( => _sad_"
          ]
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "standard",
          "max_token_length": 20
        }
      },
      "filter": {
        "my_stop": {
          "type": "stop",
          "stopwords": [
            "and",
            "is",
            "the",
            "this"
          ]
        }
      },
      "analyzer": {
        "my_analyzer": {
          "type": "custom",
          "char_filter": [
            "html_strip",
            "my_char_filter"
          ],
          "tokenizer": "my_tokenizer",
          "filter": [
            "lowercase",
            "my_stop"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "comment": {
        "type": "text",
        "analyzer": "my_analyzer"
      }
    }
  }
}

POST mixed_analyzer/_analyze
{
  "analyzer": "my_analyzer",
  "text": "<B>This is My Analyzer :)</B>"
}

POST mixed_analyzer/_doc
{
  "comment": "<B>This is My Analyzer :)</B>"
}

GET mixed_analyzer/_search
{
  "query": {
    "match": {
      "comment": "my analyzer"
    }
  }
}

DELETE nori_sample
PUT nori_sample
{
  "settings": {
    "analysis": {
      "tokenizer": {
        "nori_user_dict": {
          "type": "nori_tokenizer",
          "decompound_mode": "mixed",
          "user_dictionary": "userdict_ko.txt"
        }
      },
      "analyzer": {
        "my_analyzer": {
          "type": "custom",
          "tokenizer": "nori_user_dict"
        }
      }
    }
  }
}

DELETE nori_hanja
PUT nori_hanja
{
  "settings": {
    "analysis": {
      "tokenizer": {
        "nori_user_tokenizer": {
          "type": "nori_tokenizer",
          "decompound_mode": "mixed",
          "user_dictionary": "userdict_ko.txt"
        }
      },
      "analyzer": {
        "nori_user_analyzer": {
          "type": "custom",
          "tokenizer": "nori_user_tokenizer",
          "filter": [
            "nori_readingform"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "comment": {
        "type": "text",
        "analyzer": "nori_user_analyzer"
      }
    }
  }
}

POST nori_hanja/_close
POST nori_hanja/_open

POST nori_hanja/_analyze
{
  "tokenizer": "nori_tokenizer",
  "filter": [
    "nori_readingform"
  ],
  "text": "高昇日"
}

POST nori_hanja/_analyze
{
  "analyzer": "nori_user_analyzer",
  "text": "高昇日"
}

POST nori_hanja/_doc
{
  "comment": "高昇日"
}

GET nori_hanja/_search
{
  "query": {
    "match": {
      "comment": "高昇日"
    }
  }
}

# Term Vector
POST /bank/account/25/_termvectors
{
  "fields": [
    "address"
  ],
  "offsets": true,
  "payloads": true,
  "positions": true,
  "term_statistics": true,
  "field_statistics": true
}

# URI Search
GET bank/_search?from=0&size=100&q=address:Fleet&sort=age:asc

# Request Body Search
GET bank/_search
{
  "query": {
    "term": {
      "city.keyword": "Mulino"
    }
  }
}

# Pagination
GET bank/_search
{
  "from": 0,
  "size": 2,
  "query": {
    "match": {
      "address": "Fleet"
    }
  }
}

# max pagination size 변경
PUT bank/_settings
{
  "index.max_result_window": 10001
}

# sort
GET bank/_search
{
  "sort": {
    "age": "desc"
  }
}

# 스코어 계산방식
GET bank/_search
{
  "explain": true,
  "from": 0,
  "size": 2,
  "query": {
    "match": {
      "address": "Fleet"
    }
  }
}

# _source filtering
GET bank/_search
{
  "_source": false,
  "sort": {
    "age": "desc"
  }
}

GET bank/_search
{
  "_source": [
    "age",
    "gender"
  ],
  "sort": {
    "age": "desc"
  }
}

GET bank/_search
{
  "_source": [
    "*ge*"
  ],
  "sort": {
    "age": "desc"
  }
}

# highlight
GET bank/_search
{
  "_source": [
    "account_number",
    "firstname",
    "lastname"
  ],
  "query": {
    "query_string": {
      "query": "Fleet"
    }
  },
  "highlight": {
    "fields": {
      "address": {}
    }
  }
}

# match query
GET bank/_search
{
  "query": {
    "match": {
      "address": "345 Fleet"
    }
  }
}

# boost
GET bank/_search
{
  "query": {
    "match": {
      "address": {
        "query": "345 Fleet",
        "boost": 2
      }
    }
  }
}

# match_phrase
GET bank/_search
{
  "query": {
    "match_phrase": {
      "address": "Fleet Walk"
    }
  }
}

# match_phrase_prefix
GET bank/_search
{
  "query": {
    "match_phrase_prefix": {
      "address": "425 Fleet W"
    }
  }
}

# multi match
POST multi_match_index/_doc
{
  "name": "ElasticSearch Engine",
  "comment": "It's Best Solution"
}

POST multi_match_index/_doc
{
  "name": "Mongo DB",
  "comment": "What is difference ElasticSearch Engine"
}

GET multi_match_index/_search
{
  "query": {
    "multi_match": {
      "query": "Engine",
      "fields": [
        "name",
        "comment"
      ]
    }
  }
}

# query_string
GET bank/_search
{
  "query": {
    "query_string": {
      "query": "Walk Flee*",
      "fields": [
        "address",
        "employer"
      ]
    }
  }
}

# term
GET bank/_search
{
  "query": {
    "term": {
      "gender.keyword": "M"
    }
  }
}

# terms
GET bank/_search
{
  "query": {
    "terms": {
      "gender.keyword": [
        "F",
        "M"
      ]
    }
  }
}

# range
GET bank/_search
{
  "query": {
    "range": {
      "age": {
        "gte": 25,
        "lte": 30
      }
    }
  }
}

# wildcard
GET bank/_search
{
  "query": {
    "wildcard": {
      "lastname.keyword": "D*e"
    }
  }
}

# bool
GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "address": {
              "query": "Fleet"
            }
          }
        }
      ],
      "filter": [
        {
          "term": {
            "gender.keyword": "F"
          }
        },
        {
          "range": {
            "age": {
              "gte": "30"
            }
          }
        }
      ]
    }
  }
}

# must
GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "address": {
              "query": "Fleet"
            }
          }
        }
      ]
    }
  }
}

# filter
GET bank/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "match": {
            "address": {
              "query": "Fleet"
            }
          }
        }
      ]
    }
  }
}

# should
GET bank/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "state": {
              "query": "MI",
              "boost": 2
            }
          }
        },
        {
          "term": {
            "gender.keyword": {
              "value": "M"
            }
          }
        }
      ],
      "minimum_should_match": 1
    }
  }
}

# must_not
GET bank/_search
{
  "query": {
    "bool": {
      "must_not": [
        {
          "match": {
            "address": {
              "query": "Fleet"
            }
          }
        }
      ]
    }
  }
}

# bool all
GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "gender.keyword": "F"
          }
        }
      ],
      "filter": [
        {
          "range": {
            "age": {
              "lte": "30"
            }
          }
        }
      ],
      "should": [
        {
          "match": {
            "state": {
              "query": "MI"
            }
          }
        },
        {
          "match": {
            "city": {
              "query": "Nogal"
            }
          }
        }
      ],
      "must_not": [
        {
          "match": {
            "address": "Hope"
          }
        }
      ]
    }
  }
}
