# Q1. 인덱스에 정규표현식을 쓸 수 있는지?
# A1. 와일드 카드를 제외한 정규표현식 사용 불가

POST test1
{
  "test": "TTT"
}

POST test2
{
  "test": "TTT"
}

DELETE test[0-9]
DELETE test*

# Q2. 클러스터 샤드 라우팅 primaries, new_primaries 의 차이
# A2. 상황별로 정리
# 각 모드별로 클러스터 내에 노드가 모두 있을 때
# [인덱스 추가]
# primaries - 모든 노드에 새롭게 추가되는 인덱스에 대해서만 프라이머리 샤드만 추가, 레플리카는 unassigned
# new_primaries - 모든 노드에 새롭게 추가되는 인덱스에 대해서만 프라이머리 샤드>만 추가, 레플리카는 unassigned
# -> 동일
#
# 각 모드별로 클러스터에 노드를 추가할 때
# [샤드 배치]
# primaries - 투입되면 프라이머리 샤드들을 새롭게 추가된 노드에게 배치
# new_primaries - 투입되면 샤드를 받지 않은 채로 노드만 추가됨
# [인덱스 추가]
# primaries - 모든 노드에 새롭게 추가되는 인덱스에 대해서만 프라이머리 샤드만 추가, 레플리카는 unassigned
# new_primaries - 새롭게 추가된 노드에만 프라이머리 샤드들을 배치

PUT _cluster/settings
{
  "transient" : {
    "cluster.routing.allocation.enable" : "new_primaries"
  }
}

PUT _cluster/settings
{
  "transient" : {
    "cluster.routing.allocation.enable" : null
  }
}
PUT _cluster/settings
{
  "transient" : {
    "cluster.routing.allocation.enable" : "primaries"
  }
}

PUT _cluster/settings
{
  "transient" : {
    "cluster.routing.allocation.enable" : null
  }
}

PUT new_primaries_scaleout
{
  "settings": {
    "index.number_of_shards": 3,
    "index.unassigned.node_left.delayed_timeout": "5s"
  }
}

PUT _all/_settings
{
  "settings": {
    "index.unassigned.node_left.delayed_timeout": "5s"
  }
}

# Q3. search analyzer 는 무엇인가요?
# A. 보통의 경우 인덱스에 애널라이저를 설정하고, 특정 text field 에 해당 애널라>이저를 설정하면 색인할 때 해당 애널라이저의 방식을 따라 토큰이 생성됩니다. 이후>에 검색 시에도 동일한 애널라이저를 통해 토큰을 생성하여 일치되는 토큰이 있을 때 검색이 됩니다.
# 그런데,  N-grams. Edge N-grams 같은 토커나이저들은 색인 시에 실제 사용자가 검>색하지 않을 토큰이 다량으로 생성되는 방식으로 토큰을 생성합니다.
# ex) Foxes (min, max gram 3) -> Fox, oxe, xes
# 사용자는 실제 의미있는 Fox 로 검색하는 게 일반적입니다. 그래서 색인 시에는 가>능한 많은 토큰들을 생성하고, 검색을 할 때에는 의미 있는 토큰만을 대상으로 검색하고 싶을 때 search_analyzer 를 사용합니다.
# https://www.elastic.co/guide/en/elasticsearch/reference/current/search-analyzer.html

# ngram token
PUT ngram_index
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "ngram",
          "min_gram": 3,
          "max_gram": 3,
          "token_chars": [
            "letter",
            "digit"
          ]
        }
      }
    }
  },
  "mappings": { 
    "properties": {
      "title": { 
        "type": "text",
        "analyzer": "my_analyzer"
      }
    }
  }
}

POST ngram_index/_analyze
{
  "analyzer": "my_analyzer",
  "text": "Foxes"
}
# search_analyzer
PUT search_analyzer_index1
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "ngram",
          "min_gram": 3,
          "max_gram": 3,
          "token_chars": [
            "letter",
            "digit"
          ]
        }
      }
    }
  },
  "mappings": { 
    "properties": {
      "title": { 
        "type": "text",
        "analyzer": "my_analyzer",
        "search_analyzer": "standard"
      }
    }
  }
}

POST search_analyzer_index1/_doc
{
  "title": "Foxes"
}

POST search_analyzer_index1/_search
{
  "query": {
    "match": {
      "title": "Fox"
    }
  }
}

# lowercase token filter for standard analyzer
PUT search_analyzer_index2
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer",
          "filter": [ "lowercase" ]
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "ngram",
          "min_gram": 3,
          "max_gram": 3,
          "token_chars": [
            "letter",
            "digit"
          ]
        }
      }
    }
  },
  "mappings": { 
    "properties": {
      "title": { 
        "type": "text",
        "analyzer": "my_analyzer",
        "search_analyzer": "standard"
      }
    }
  }
}

POST search_analyzer_index2/_doc
{
  "title": "Foxes"
}

POST search_analyzer_index2/_search
{
  "query": {
    "match": {
      "title": "Fox"
    }
  }
}

# Q4. 쿼리가 한 번이라도 수행되었을 때 받은 스코어를 유지할 수 있는 방법은 없나요?
# A4. constant_score 를 사용하여 처음부터 스코어를 지정해주는 방법이 있습니다. 이 쿼리는 사용자가 특정 쿼리에 스코어를 지정하여 지속적으로 사용할 것이 예상되기 때문에 filter 절 내에 정의하도록 구성되어 있습니다.

# score1, 2, 3...

POST bank/_search
{
  "query": {
    "match": {
      "address": "Fleet" 
    }
  }
}


GET bank/_search
{
    "query": {
        "constant_score" : {
            "filter": {
                "match" : { "address" : "Fleet"}
            },
            "boost" : 3.4
        }
    }
}

# Q5.  bulk size 조정 방법
# 벌크 사이즈의 조정은 클라에서 합니다. ES 에서 조정할 수 있는 것은 bulk job 이 코어를 몇 개 까지 쓸 수 있게 할 것인지, 코어를 다 써서 더 이상 할당할 코어가 없을 때 요청된 job 들을 얼마나 저장할지만 결정합니다. 6장에 해당 내용이 있습니다.

# Q6. term 쿼리는 스코어가 일정한데 어떤 사항을 기준으로 순서가 결정되나요?
# A6. 순서는 랜덤하게 결정됩니다. 스코어가 모두 동일하기 때문에 전체 문서가 필요하면 pagination 을 활용해야 합니다.

# 8509
POST shakespeare/_search
{
  "query": {
    "term": {
      "speaker.keyword": "CADE"
    }
  }
}

# Q7. search template
# A7. 사용자가 요청할 쿼리의 형식을 미리 템플릿화 하여 정의하고 정의된 템플릿에 편하게 쿼리를 요청할 수 있는 기능
GET _search/template
{
    "source" : {
      "query": { "match" : { "{{my_field}}" : "{{my_value}}" } },
      "size" : "{{my_size}}"
    },
    "params" : {
        "my_field" : "message",
        "my_value" : "some message",
        "my_size" : 5
    }
}

POST _scripts/my_search_template
{
    "script":{
        "lang":"mustache",
        "source":{
            "query":{
                "match":{
                    "text_entry":"{{my_query}}"
                }
            }
        }
    }
}

GET _scripts/my_search_template

POST shakespeare/_search/template
{
  "id": "my_search_template",
  "params": {
    "my_query": "my mother"
  }
}

DELETE _scripts/my_search_template
